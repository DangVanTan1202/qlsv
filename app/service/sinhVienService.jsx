const API_BASE = 'http://qltruonghoc.ddns.net/odata';

// L·∫•y token t·ª´ localStorage
export const getToken = () => {
  return localStorage.getItem("token") || "";
};

// üëâ D√πng trong Server Component
export const fetchSinhViens = async () => {
  try {
    const res = await fetch(`${API_BASE}/SinhViens?$expand=User,LopHoc`);
    const data = await res.json();
    return data.value || [];
  } catch (error) {
    console.error("L·ªói fetch sinh vi√™n:", error);
    return [];
  }
};
// üëâ D√πng trong Client Component
export const fetchSinhViensClient = async (setSinhViens) => {
  try {
    const res = await fetch(`${API_BASE}/SinhViens?$expand=User,LopHoc`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
        "Content-Type": "application/json",
      },
    });
    const data = await res.json();
    setSinhViens(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch sinh vi√™n:", error);
  }
};

// L·∫•y danh s√°ch user (l·ªçc lo·∫°i t√†i kho·∫£n l√† sinh vi√™n n·∫øu c·∫ßn)
export const fetchUsers = async (setUsers) => {
  try {
    const res = await fetch(`${API_BASE}/Users`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    const data = await res.json();
    setUsers(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch users:", error);
  }
};

// L·∫•y danh s√°ch l·ªõp h·ªçc
export const fetchLopHocs = async (setLopHocs) => {
  try {
    const res = await fetch(`${API_BASE}/LopHocs`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    const data = await res.json();
    setLopHocs(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch l·ªõp h·ªçc:", error);
  }
};

// Th√™m sinh vi√™n
export const addSinhVien = async (data) => {
    try {
      // Ki·ªÉm tra v√† √©p ki·ªÉu d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
      const payload = {
        maSinhVien: data.maSinhVien,
        ngaySinh: data.ngaySinh, // ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng 'YYYY-MM-DD'
        user_id: Number(data.user_id), // √©p ki·ªÉu ƒë·ªÉ tr√°nh l·ªói
        idLopHoc: Number(data.idLopHoc),
      };
  
      console.log("Payload g·ª≠i ƒëi:", payload); // debug tr∆∞·ªõc khi g·ª≠i
  
      const res = await fetch(`${API_BASE}/SinhViens`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${getToken()}`,
        },
        body: JSON.stringify(payload),
      });
  
      if (!res.ok) {
        const error = await res.json();
        console.error("L·ªói chi ti·∫øt t·ª´ API:", error);
        throw new Error(`L·ªói th√™m: ${error?.["odata.error"]?.message?.value || "Kh√¥ng r√µ l·ªói"}`);
      }
  
      const result = await res.json();
      console.log("Th√™m sinh vi√™n th√†nh c√¥ng:", result);
      return result;
    } catch (error) {
      console.error(" L·ªói th√™m sinh vi√™n:", error.message);
      throw error;
    }
  };
  

// C·∫≠p nh·∫≠t sinh vi√™n
export const updateSinhVien = async (id, data) => {
  try {
    // Ki·ªÉm tra v√† √©p ki·ªÉu d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
    const payload = {
        maSinhVien: data.maSinhVien,
        ngaySinh: data.ngaySinh, // ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng 'YYYY-MM-DD'
        user_id: Number(data.user_id), // √©p ki·ªÉu ƒë·ªÉ tr√°nh l·ªói
        idLopHoc: Number(data.idLopHoc),
      };
  
      console.log("Payload g·ª≠i ƒëi:", payload); // debug tr∆∞·ªõc khi g·ª≠i
    const res = await fetch(`${API_BASE}/SinhViens(${id})`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${getToken()}`,
      },
      body: JSON.stringify(payload),
    });

    if (!res.ok) {
      const error = await res.text();
      throw new Error(`L·ªói c·∫≠p nh·∫≠t: ${error?.["odata.error"]?.message?.value || "Kh√¥ng r√µ l·ªói"}`);
    }

    console.log("C·∫≠p nh·∫≠t sinh vi√™n th√†nh c√¥ng");
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t sinh vi√™n:", error);
  }
};

// Xo√° sinh vi√™n
export const deleteSinhVien = async (id) => {
  try {
    const res = await fetch(`${API_BASE}/SinhViens(${id})`, {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });

    if (!res.ok) {
      const error = await res.text();
      throw new Error(`L·ªói xo√°: ${error}`);
    }

    console.log("Xo√° sinh vi√™n th√†nh c√¥ng");
  } catch (error) {
    console.error("L·ªói xo√° sinh vi√™n:", error);
  }
};

// L·∫•y danh s√°ch ch·ª©c nƒÉng
export const fetchChucNangs = async (setChucNangs) => {
  try {
    const res = await fetch(`${API_BASE}/ChucNangs`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    const data = await res.json();
    setChucNangs(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch ch·ª©c nƒÉng:", error);
  }
};

// L·∫•y danh s√°ch ph√¢n quy·ªÅn theo lo·∫°i t√†i kho·∫£n
export const fetchPhanQuyenByLoaiTK = async (idLoaiTK, setPhanQuyenList) => {
  try {
    const res = await fetch(`${API_BASE}/PhanQuyen_LoaiTK?$filter=IdLoaiTK eq ${idLoaiTK}`, {
      headers: {
        Authorization: `Bearer ${getToken()}`
      }
    });
    const data = await res.json();
    setPhanQuyenList(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch ph√¢n quy·ªÅn:", error);
  }
};
