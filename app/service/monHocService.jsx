const API_BASE = 'http://qltruonghoc.ddns.net/odata';

// L·∫•y token t·ª´ localStorage
export const getToken = () => {
  return localStorage.getItem("token") || "";
};

// üëâ D√πng trong Server Component ƒë·ªÉ l·∫•y m√¥n h·ªçc
export const fetchMonHocs = async () => {
  try {
    const res = await fetch(`${API_BASE}/MonHocs?$expand=GiangVien,LopHoc`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    const data = await res.json();
    return data.value || [];
  } catch (error) {
    console.error("L·ªói fetch m√¥n h·ªçc:", error);
    return [];
  }
};

// üëâ D√πng trong Client Component ƒë·ªÉ l·∫•y m√¥n h·ªçc v√† c·∫≠p nh·∫≠t state
export const fetchMonHocsClient = async (setMonHocs) => {
  try {
    const res = await fetch(`${API_BASE}/MonHocs?$expand=GiangVien,LopHoc`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
        "Content-Type": "application/json",
      },
    });
    const data = await res.json();
    setMonHocs(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch m√¥n h·ªçc:", error);
  }
};
export const fetchChucNangs = async (setChucNangs) => {
  try {
    const res = await fetch(`${API_BASE}/ChucNangs`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    const data = await res.json();
    setChucNangs(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch ch·ª©c nƒÉng:", error);
  }
};
// L·∫•y danh s√°ch gi·∫£ng vi√™n
export const fetchGiangViens = async (setGiangViens) => {
  try {
    const res = await fetch(`${API_BASE}/GiangViens`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    const data = await res.json();
    setGiangViens(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch gi·∫£ng vi√™n:", error);
  }
};

// L·∫•y danh s√°ch l·ªõp h·ªçc
export const fetchLopHocs = async (setLopHocs) => {
  try {
    const res = await fetch(`${API_BASE}/LopHocs`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    const data = await res.json();
    setLopHocs(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch l·ªõp h·ªçc:", error);
  }
};

// Th√™m m√¥n h·ªçc
export const addMonHoc = async (data) => {
  try {
    // Ki·ªÉm tra v√† √©p ki·ªÉu d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
    const payload = {
      maMonHoc: data.maMonHoc,
      tenMonHoc: data.tenMonHoc,
      idGiangVien: Number(data.idGiangVien),
      LopHoc_Id: Number(data.LopHoc_Id),
    };

    console.log("Payload g·ª≠i ƒëi:", payload); // debug tr∆∞·ªõc khi g·ª≠i

    const res = await fetch(`${API_BASE}/MonHocs`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${getToken()}`,
      },
      body: JSON.stringify(payload),
    });

    if (!res.ok) {
      const error = await res.json();
      console.error("L·ªói chi ti·∫øt t·ª´ API:", error);
      throw new Error(`L·ªói th√™m: ${error?.["odata.error"]?.message?.value || "Kh√¥ng r√µ l·ªói"}`);
    }

    const result = await res.json();
    console.log("Th√™m m√¥n h·ªçc th√†nh c√¥ng:", result);
    return result;
  } catch (error) {
    console.error("L·ªói th√™m m√¥n h·ªçc:", error.message);
    throw error;
  }
};

// C·∫≠p nh·∫≠t m√¥n h·ªçc
export const updateMonHoc = async (id, data) => {
  try {
    // Ki·ªÉm tra v√† √©p ki·ªÉu d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
    const payload = {
      maMonHoc: data.maMonHoc,
      tenMonHoc: data.tenMonHoc,
      idGiangVien: Number(data.idGiangVien),
      LopHoc_Id: Number(data.LopHoc_Id),
    };

    console.log("Payload g·ª≠i ƒëi:", payload); // debug tr∆∞·ªõc khi g·ª≠i

    const res = await fetch(`${API_BASE}/MonHocs(${id})`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${getToken()}`,
      },
      body: JSON.stringify(payload),
    });

    if (!res.ok) {
      const error = await res.text();
      throw new Error(`L·ªói c·∫≠p nh·∫≠t: ${error || "Kh√¥ng r√µ l·ªói"}`);
    }

    console.log("C·∫≠p nh·∫≠t m√¥n h·ªçc th√†nh c√¥ng");
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t m√¥n h·ªçc:", error);
  }
};

// Xo√° m√¥n h·ªçc
export const deleteMonHoc = async (id) => {
  try {
    const res = await fetch(`${API_BASE}/MonHocs(${id})`, {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });

    if (!res.ok) {
      const error = await res.text();
      throw new Error(`L·ªói xo√°: ${error}`);
    }

    console.log("Xo√° m√¥n h·ªçc th√†nh c√¥ng");
  } catch (error) {
    console.error("L·ªói xo√° m√¥n h·ªçc:", error);
  }
};
// L·∫•y danh s√°ch ph√¢n quy·ªÅn theo lo·∫°i t√†i kho·∫£n
export const fetchPhanQuyenByLoaiTK = async (idLoaiTK, setPhanQuyenList) => {
  try {
    const res = await fetch(`${API_BASE}/PhanQuyen_LoaiTK?$filter=IdLoaiTK eq ${idLoaiTK}`, {
      headers: {
        Authorization: `Bearer ${getToken()}`
      }
    });
    const data = await res.json();
    setPhanQuyenList(data.value || []);
  } catch (error) {
    console.error("L·ªói fetch ph√¢n quy·ªÅn:", error);
  }
};

